# Dockerfile for VINS Project on Jetson Orin Nano (JetPack 6.2.1)
# Base image with CUDA support for Jetson - using JetPack image with all components
FROM nvcr.io/nvidia/l4t-jetpack:r36.4.0

# Set environment variables
ENV DEBIAN_FRONTEND=noninteractive
ENV ROS_DISTRO=humble
ENV LANG=en_US.UTF-8
ENV LC_ALL=en_US.UTF-8
ENV CUDA_HOME=/usr/local/cuda
ENV PATH=${CUDA_HOME}/bin:${PATH}
ENV LD_LIBRARY_PATH=${CUDA_HOME}/lib64:${LD_LIBRARY_PATH}

# Set working directory
WORKDIR /root

# ============================================
# 1. System Updates and Basic Dependencies
# ============================================
RUN apt-get update && apt-get install -y \
    locales \
    software-properties-common \
    curl \
    wget \
    git \
    build-essential \
    cmake \
    ninja-build \
    pkg-config \
    python3-pip \
    python3-dev \
    python3-numpy \
    nano \
    vim \
    && locale-gen en_US en_US.UTF-8 \
    && update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8 \
    && rm -rf /var/lib/apt/lists/*

# ============================================
# 2. ROS 2 Humble Installation
# ============================================
RUN add-apt-repository universe && apt-get update

# Add ROS 2 apt repository
RUN curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg \
    && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(. /etc/os-release && echo $UBUNTU_CODENAME) main" | tee /etc/apt/sources.list.d/ros2.list > /dev/null

# Install ROS 2 Humble
RUN apt-get update && apt-get install -y \
    ros-${ROS_DISTRO}-desktop \
    ros-dev-tools \
    ros-${ROS_DISTRO}-ros2bag \
    ros-${ROS_DISTRO}-rosbag2* \
    python3-rosdep \
    python3-vcstool \
    python3-rosinstall-generator \
    python3-osrf-pycommon \
    libeigen3-dev \
    libboost-all-dev \
    libceres-dev \
    && rm -rf /var/lib/apt/lists/*

# Initialize rosdep
RUN rosdep init && rosdep update

# ============================================
# 3. OpenCV Dependencies
# ============================================
RUN apt-get update && apt-get install -y \
    libgtk-3-dev \
    libavcodec-dev \
    libavformat-dev \
    libswscale-dev \
    libgstreamer1.0-dev \
    libgstreamer-plugins-base1.0-dev \
    libjpeg-dev \
    libpng-dev \
    libtiff-dev \
    libopenexr-dev \
    libtbb2 \
    libtbb-dev \
    libdc1394-dev \
    && rm -rf /var/lib/apt/lists/*

# ============================================
# 4. Build OpenCV 4.10.0 with CUDA
# ============================================
WORKDIR /tmp
RUN git clone --branch 4.10.0 --depth 1 https://github.com/opencv/opencv.git \
    && git clone --branch 4.10.0 --depth 1 https://github.com/opencv/opencv_contrib.git

# Get CUDA architecture for Jetson Orin (Ampere = 8.7)
RUN mkdir -p /tmp/opencv/build && cd /tmp/opencv/build \
    && cmake -G Ninja \
        -D CMAKE_BUILD_TYPE=Release \
        -D CMAKE_INSTALL_PREFIX=/usr/local \
        -D OPENCV_EXTRA_MODULES_PATH=/tmp/opencv_contrib/modules \
        -D WITH_CUDA=ON \
        -D CUDA_ARCH_BIN=8.7 \
        -D WITH_CUDNN=ON \
        -D OPENCV_DNN_CUDA=OFF \
        -D ENABLE_FAST_MATH=1 \
        -D CUDA_FAST_MATH=1 \
        -D WITH_GSTREAMER=ON \
        -D BUILD_TESTS=OFF \
        -D BUILD_PERF_TESTS=OFF \
        -D BUILD_EXAMPLES=OFF \
        -D BUILD_opencv_python2=OFF \
        -D BUILD_opencv_python3=ON \
        -D PYTHON_DEFAULT_EXECUTABLE=/usr/bin/python3 \
        -D OPENCV_ENABLE_NONFREE=ON \
        -D WITH_CUBLAS=ON \
        -D WITH_CUFFT=ON \
        .. \
    && ninja -j$(nproc) \
    && ninja install \
    && ldconfig \
    && cd /root \
    && rm -rf /tmp/opencv /tmp/opencv_contrib

# ============================================
# 5. Create ROS 2 Workspace and Build MAVROS
# ============================================
WORKDIR /root/ros2_ws
RUN mkdir -p /root/ros2_ws/src

# Source ROS 2
SHELL ["/bin/bash", "-c"]
RUN source /opt/ros/${ROS_DISTRO}/setup.bash \
    && rosinstall_generator --format repos mavlink | tee /tmp/mavlink.repos \
    && rosinstall_generator --format repos --upstream mavros | tee -a /tmp/mavros.repos \
    && vcs import src < /tmp/mavlink.repos \
    && vcs import src < /tmp/mavros.repos

# Install dependencies
RUN apt-get update && apt-get install -y \
    python3-future \
    libgeographic-dev \
    ros-${ROS_DISTRO}-geographic-msgs \
    ros-${ROS_DISTRO}-eigen-stl-containers \
    ros-${ROS_DISTRO}-diagnostic-updater \
    libasio-dev \
    && rm -rf /var/lib/apt/lists/*

RUN source /opt/ros/${ROS_DISTRO}/setup.bash \
    && rosdep install --from-paths src --ignore-src -y || true

# Install GeographicLib datasets
RUN /root/ros2_ws/src/mavros/mavros/scripts/install_geographiclib_datasets.sh

# Build MAVROS
RUN source /opt/ros/${ROS_DISTRO}/setup.bash \
    && cd /root/ros2_ws \
    && colcon build --symlink-install \
    && rm -rf build log

# ============================================
# 6. Install OpenVINS
# ============================================
RUN cd /root/ros2_ws/src \
    && git clone https://github.com/rpng/open_vins/

# Build OpenVINS packages
RUN source /opt/ros/${ROS_DISTRO}/setup.bash \
    && source /root/ros2_ws/install/setup.bash \
    && cd /root/ros2_ws \
    && colcon build --symlink-install \
        --event-handlers console_cohesion+ \
        --packages-select ov_core ov_init ov_msckf ov_eval \
    && rm -rf build log

# ============================================
# 7. Setup Camera Driver
# ============================================
RUN cd /root/ros2_ws/src \
    && git clone https://github.com/valentinomario/camera_driver

# Build the camera driver
RUN source /opt/ros/${ROS_DISTRO}/setup.bash \
    && source /root/ros2_ws/install/setup.bash \
    && cd /root/ros2_ws \
    && colcon build --symlink-install

# ============================================
# 8. Environment Setup
# ============================================
# Add ROS setup to bashrc
RUN echo "source /opt/ros/${ROS_DISTRO}/setup.bash" >> /root/.bashrc \
    && echo "source /root/ros2_ws/install/setup.bash" >> /root/.bashrc \
    && echo "export ROS_DOMAIN_ID=0" >> /root/.bashrc

# ============================================
# 9. Verify Installation
# ============================================
RUN python3 -c "import cv2; print('OpenCV version:', cv2.__version__); print('CUDA:', cv2.cuda.getCudaEnabledDeviceCount())"

# Set default command
WORKDIR /root/ros2_ws
CMD ["/bin/bash"]
